#!/bin/bash

# GWF - git work flow
# (C) Michael Wojciechowski-Jensen

ARG="${1}"

if [ -z "${GIT_EDITOR}" ]; then
  export GIT_EDITOR='nano -z'
  echo "Editor set to ${GIT_EDITOR}"
fi

GITNAME=$(basename -s .git $(git config --get remote.origin.url)) || GITNAME=""

# Obtain the name of the master branch for the current git repository:
MASTER_NAME_=$(git symbolic-ref refs/remotes/origin/HEAD || echo "")
MASTER_NAME=$(echo ${MASTER_NAME_##*/})
echo "MASTER_NAME=${MASTER_NAME}"

# Or read it from the config if provided:
CONFIG_FILE="${HOME}/.gwf/main-branch"
if [ -s ${CONFIG_FILE} ]; then
  MASTER_NAME=$(cat ${CONFIG_FILE})
fi

if [ -z "${MASTER_NAME}" ]; then
  echo "Unable to find git master branch \"${MASTER_NAME}\""
  exit 1
fi

#exit 0

if [ -z "${ARG}" ]; then
  echo "What workflow do you want to execute?"
  echo "Possible workflows:"
  echo "cr <branch>  - create work branch."
  echo "pub          - pull followed by rebase."
  echo "th           - pull followed by rebase, take their version."
  echo "pr           - push ready branch."
  echo "am           - ammend last commit, edit message."
  echo "ac           - add modified files with commit message (work branch name)."
  echo "reb          - list ten most recent branches."
  echo "lbr          - push local branch to remote server."
  echo "ec <message> - add empty commit with <message>."
  echo ""
  echo "More advanced usecases:"
  echo "cp <branch> <id>"
  echo "  Create <branch>. Cherry pick <id> and commiot it."
  echo "check"
  echo "  Execute \${REPO_NAME}-check.sh script to execute any often executed checks prior to pushing."
  echo "  \{REPO_NAME} is the name of the gif repository in which this tool is executed."
  if [ ! -z "${GITNAME}" ]; then
    echo "  For this repository the script is located in ${HOME}/.gwf/${GITNAME}-check.sh" 
  fi
  exit 1
fi

# TODO: Set this based on args:
VERBOSE=1

verbose () {
  if [ "${VERBOSE}" -eq "1" ]; then
    echo "${1}"
  fi
}

STATUS=1

if [ "${ARG}" == "pub" ]; then
  verbose "Handling pull/rebase"
  verbose "Executing git pull"
  git pull --no-edit && \
  verbose "Executing git rebase" && \
  git rebase && \
  STATUS=0
  verbose "Finished with status ${STATUS}"
  exit ${STATUS}
elif [ "${ARG}" == "th" ]; then
  verbose "Handling pull/rebase"
  verbose "Executing git pull"
  git pull --no-edit && \
  verbose "Executing git rebase" && \
  git rebase -Xtheirs && \
  STATUS=0
  verbose "Finished with status ${STATUS}"
  exit ${STATUS}
elif [ "${ARG}" == "reb" ]; then
  git branch --sort=committerdate|head -n10 && STATUS=0
  exit ${STATUS}
elif [ "${ARG}" == "ec" ]; then
  MESSAGE="$2"
  verbose "Adding empty commit with message ${MESSAGE}"
  if [ -z "${MESSAGE}" ]; then
    exit ${STATUS}
  fi
  git commit --allow-empty -m"${MESSAGE}" && STATUS=0
  exit ${STATUS}
elif [ "${ARG}" == "cr" ]; then
  BRANCH="$2"
  if [ -z "${BRANCH}" ]; then
    echo "No branch provided."
    exit ${STATUS}
  fi
  verbose "Updating local master"
  git checkout ${MASTER_NAME} || exit ${STATUS}
  git pull --rebase origin ${MASTER_NAME}

  verbose "Creating branch ${BRANCH}"
  git checkout -b "${BRANCH}"
  git branch --set-upstream-to=origin/${MASTER_NAME}
  verbose "Updating branch ${BRANCH}"
  git pull || exit ${STATUS}
  git rebase || exit ${STATUS}
  STATUS=0
  verbose "Branch creation OK"
elif [ "${ARG}" == "ac" ]; then
  verbose "Adding updated files with commit message: branch name"
  BN=$(git rev-parse --abbrev-ref HEAD)

  if [ -z "${BN}" ]; then
    echo "Empty branch name."
    exit ${STATUS}
  fi

  if [ "${BN}" == "${MASTER_NAME}" ]; then
    echo "Not comitting on master."
    exit ${STATUS}
  fi

  verbose "Adding all changed files."
  git add -u && \
  git commit -m "${BN}" && \
  STATUS=0
  exit ${STATUS}
elif [ "${ARG}" == "am" ]; then
  verbose "Adding updated files, ammending last commit"
  git add -u && \
  git commit --amend && STATUS=0

  exit ${STATUS}
elif [ "${ARG}" == "lbr" ]; then
  verbose "Pushing local branch to remote"
  BRANCH=$(git rev-parse --abbrev-ref HEAD)  
  if [ -z "${BRANCH}" ]; then
    echo "No branch provided."
    exit ${STATUS}
  fi

  if [ "${BRANCH}" == "${MASTER_NAME}" ]; then
    echo "Not pushing master \"${MASTER_NAME}\"."
    exit ${STATUS}
  fi

  git push origin ${BRANCH} || exit ${STATUS}

  STATUS=0
  verbose "Branch pushed"
elif [ "${ARG}" == "pr" ]; then
  BRANCH=$(git rev-parse --abbrev-ref HEAD)  
  if [ -z "${BRANCH}" ]; then
    echo "No branch provided."
    exit ${STATUS}
  fi

  if [ "${BRANCH}" == "${MASTER_NAME}" ]; then
    echo "Not pushing master \"${MASTER_NAME}\"."
    exit ${STATUS}
  fi

  verbose "Pushing branch ${BRANCH} to ready"
  R=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9'|fold -w8|head -n1)
  READY_BRANCH_NAME="${BRANCH}_${R}"
  verbose "Using branch name ${READY_BRANCH_NAME}"
  git push origin ${BRANCH}:ready/${READY_BRANCH_NAME} && \
  STATUS=0
  verbose "Finished with status ${STATUS}"
  exit ${STATUS}
else
  verbose "Unknown flow"
  exit 1
fi

exit 0
